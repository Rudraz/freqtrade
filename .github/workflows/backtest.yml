name: Backtest

on:
  push:
    branches: [ main ]
    paths: ['user_data/**','docker-compose.yml','.github/workflows/backtest.yml']
  pull_request:
    paths: ['user_data/**','docker-compose.yml','.github/workflows/backtest.yml']
  workflow_dispatch: {}

jobs:
  backtest:
    runs-on: ubuntu-latest
    strategy:
      matrix: { strategy: [SampleStrategy, RSIMeanReversion] }
    steps:
      - uses: actions/checkout@v4

      - name: Pull Freqtrade image
        run: docker pull freqtradeorg/freqtrade:stable

      - name: Create CI config (KuCoin) and also copy to config.json
        run: |
          mkdir -p user_data
          cat > user_data/config.backtest.json <<'JSON'
          {
            "dry_run": true,
            "exchange": { "name": "kucoin", "key": "DUMMY", "secret": "DUMMY",
              "ccxt_config": {"enableRateLimit": true},
              "ccxt_async_config": {"enableRateLimit": true} },
            "pair_whitelist": ["BTC/USDT", "ETH/USDT"],
            "timeframe": "5m",
            "stake_currency": "USDT",
            "stake_amount": "unlimited",
            "max_open_trades": 2,
            "api_server": { "enabled": false }
          }
          JSON
          cp user_data/config.backtest.json user_data/config.json

      # GUARD 1 — fail immediately if config.json is not KuCoin
      - name: Guard: config.json must be KuCoin
        run: |
          echo "==> Checking exchange field in user_data/config.json"
          grep -qi '"name": *"kucoin"' user_data/config.json || (echo "Config is not KuCoin!"; cat user_data/config.json; exit 1)

      - name: Download sample data (KuCoin; fallback to Kraken)
        run: |
          set -e
          MOUNT="${{ github.workspace }}/user_data:/freqtrade/user_data"
          CFG="/freqtrade/user_data/config.backtest.json"

          echo "==> Try KuCoin"
          if ! docker run --rm -v "$MOUNT" freqtradeorg/freqtrade:stable \
               download-data --config "$CFG" -t 5m --timerange 20250110-20250120 ; then
            echo "==> KuCoin failed; switching to Kraken (USD pairs)"
            cat > ${{ github.workspace }}/user_data/config.backtest.json <<'JSON'
            {
              "dry_run": true,
              "exchange": { "name": "kraken", "key": "DUMMY", "secret": "DUMMY",
                "ccxt_config": {"enableRateLimit": true},
                "ccxt_async_config": {"enableRateLimit": true} },
              "pair_whitelist": ["BTC/USD", "ETH/USD"],
              "timeframe": "5m",
              "stake_currency": "USD",
              "stake_amount": "unlimited",
              "max_open_trades": 2,
              "api_server": { "enabled": false }
            }
            JSON
            cp ${{ github.workspace }}/user_data/config.backtest.json ${{ github.workspace }}/user_data/config.json
            docker run --rm -v "$MOUNT" freqtradeorg/freqtrade:stable \
               download-data --config "$CFG" -t 5m --timerange 20250110-20250120
          fi

      # GUARD 2 — show exactly what config files contain
      - name: Show files (guard)
        run: |
          echo "--- config.backtest.json ---"
          sed -n '1,120p' user_data/config.backtest.json
          echo "--- config.json ---"
          sed -n '1,120p' user_data/config.json

      - name: Run backtest (${{ matrix.strategy }})
        run: |
          mkdir -p user_data/backtest_results
          docker run --rm -v ${{ github.workspace }}/user_data:/freqtrade/user_data \
            freqtradeorg/freqtrade:stable \
            backtesting --config /freqtrade/user_data/config.backtest.json \
            --strategy ${{ matrix.strategy }} \
            --timeframe 5m \
            --timerange 20250110-20250120 \
            --export trades \
            --export-filename /freqtrade/user_data/backtest_results/${{ matrix.strategy }}_bt.json

      - name: Upload artifact (${{ matrix.strategy }})
        uses: actions/upload-artifact@v4
        with:
          name: backtest-${{ matrix.strategy }}
          path: user_data/backtest_results/${{ matrix.strategy }}_bt.json
